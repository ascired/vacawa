html {color: #000;font-size: 1em;line-height: 1.4;}::-moz-selection {background: #5f86b5;text-shadow: none;}::selection {background: #5f86b5;text-shadow: none;}hr {display: block;height: 1px;border: 0;border-top: 1px solid #ccc;margin: 1em 0;padding: 0;}audio,canvas,iframe,img,svg,video {vertical-align: middle;}fieldset {border: 0;margin: 0;padding: 0;}textarea {resize: vertical;}
input:focus, textarea:focus, select:focus, button:focus {outline: 0;}
* { -webkit-box-sizing: border-box;-moz-box-sizing: border-box;box-sizing: border-box;}

@font-face {
	font-family: 'Hero';
	src: url('../fonts/Hero.eot');
	src: url('../fonts/Hero.eot?#iefix') format('embedded-opentype'),
	url('../fonts/Hero.woff') format('woff'),
	url('../fonts/Hero.svg#Hero') format('svg');
	font-weight: normal;
	font-style: normal;
}

@font-face {
	font-family: 'apercu_pro_light';
	src: url('../fonts/apercupro-light-webfont.woff') format('woff'),
	url('../fonts/apercupro-light-webfont.ttf') format('truetype'),
	url('../fonts/apercupro-light-webfont.svg#apercu_prolight') format('svg');
	font-weight: normal;
	font-style: normal;
}

html {
	min-height: 100%;
	background: #65b0dd;
	background: -webkit-linear-gradient(#e0c013 0%, #ac7f00 100%);
	background: -o-linear-gradient(#e0c013 0%, #ac7f00 100%);
	background: linear-gradient(#e0c013 0%, #ac7f00 100%);
}
body {
	min-height: 100vh;
	min-width: 640px;
	font-family: 'Hero';
}
.main {
	position: relative;
	min-height: 100vh;
	text-align: center;
	overflow: hidden;
}
.main__section {
	position: fixed;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
}
.main__video {
	position: absolute;
	min-height: 100vh;
	margin: auto;
	top: -9999px;
	right: -9999px;
	bottom: -9999px;
	left: -9999px;
	min-width: 100%;
}

.main__watch {
	position: relative;
	display: flex;
	width: 640px;
	height: 100vh;
	justify-content: center;
	align-items: center;
	margin: 0 auto;
}
.watch__wrap {
	position: relative;
	display:flex;
	justify-content: space-between;
	padding: 40px;
}
.watch__wrap:before {
	content: "";
	position: absolute;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
	background: rgba(255, 255, 255, .5);
	filter: blur(1px);
}
.watch__item {
	position: relative;
	padding: 0 20px;
	font-size: 36px;
	vertical-align: baseline;
}

.watch__label {
	display: block;
	font-size: 14px;
	color: rgba(0, 0, 0, .3);
}
.watch__value {
	display: block;
	font-weight: bold;
	color: rgba(0, 0, 0, .8);
}

@media only screen and (min-width: 1024px) {
	.main {}
}



/* ==========================================================================
   Helper classes
   ========================================================================== */

/*
 * Hide visually and from screen readers
 */

 .hidden {
 	display: none !important;
 }

/*
 * Hide only visually, but have it available for screen readers:
 * https://snook.ca/archives/html_and_css/hiding-content-for-accessibility
 *
 * 1. For long content, line feeds are not interpreted as spaces and small width
 *    causes content to wrap 1 word per line:
 *    https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe
 */

 .visuallyhidden {
 	border: 0;
 	clip: rect(0 0 0 0);
 	-webkit-clip-path: inset(50%);
 	clip-path: inset(50%);
 	height: 1px;
 	margin: -1px;
 	overflow: hidden;
 	padding: 0;
 	position: absolute;
 	width: 1px;
 	white-space: nowrap; /* 1 */
 }

/*
 * Extends the .visuallyhidden class to allow the element
 * to be focusable when contentigated to via the keyboard:
 * https://www.drupal.org/node/897638
 */

 .visuallyhidden.focusable:active,
 .visuallyhidden.focusable:focus {
 	clip: auto;
 	-webkit-clip-path: none;
 	clip-path: none;
 	height: auto;
 	margin: 0;
 	overflow: visible;
 	position: static;
 	width: auto;
 	white-space: inherit;
 }

/*
 * Hide visually and from screen readers, but maintain layout
 */

 .invisible {
 	visibility: hidden;
 }

/*
 * Clearfix: contain floats
 *
 * For modern browsers
 * 1. The space content is one way to avoid an Opera bug when the
 *    `contenteditable` attribute is included anywhere else in the document.
 *    Otherwise it causes space to appear at the top and bottom of elements
 *    that receive the `clearfix` class.
 * 2. The use of `table` rather than `block` is only necessary if using
 *    `:before` to contain the top-margins of child elements.
 */

 .clearfix:before,
 .clearfix:after {
 	content: " "; /* 1 */
 	display: table; /* 2 */
 }

 .clearfix:after {
 	clear: both;
 }
